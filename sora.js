(async function() {
    
    // Configuration
    const CONFIG = {
        numberOfVideos: 5, // Nombre total de vid√©os √† g√©n√©rer
        concurrentGenerations: 1, // Une seule g√©n√©ration √† la fois pour respecter la limite
        delayBetweenBatches: 60000, // 60 secondes entre chaque g√©n√©ration
        delayBetweenClicks: 2000, // D√©lai entre chaque clic dans une m√™me vague
        storageKey: 'videoGeneratorState',
        autoDownload: true,
        delayBeforeDownload: 3000,
        maxWaitTimeMs: 600000, // 10 minutes max pour chaque vid√©o
        pollInterval: 3000, // Intervalle de v√©rification pour les nouvelles vid√©os
        maxClickRetries: 10, // Nombre de tentatives pour le clic
        maxDownloadRetries: 3, // Nombre de tentatives pour le t√©l√©chargement
        retryClickDelay: 10000 // 10 secondes avant de retenter un clic
    };

    // Personnages pour interviews absurdes (mix historique et fiction)
    const CHARACTERS = [
        "Napol√©on Bonaparte d√©couvrant les influenceurs Instagram",
        "Cl√©op√¢tre r√©agissant aux tutoriels makeup TikTok",
        "Jules C√©sar commentant les drama Twitter",
        "Jeanne d'Arc expliquant comment ghosting quelqu'un",
        "Mozart √©coutant du rap drill et donnant son avis",
        "Marie Curie d√©couvrant les pseudosciences sur TikTok",
        "Einstein tentant de comprendre les cryptomonnaies",
        "Socrate d√©battant avec des flat-earthers",
        "Da Vinci critiquant l'art NFT",
        "Shakespeare lisant des fanfictions sur Wattpad",
        "Confucius regardant Love Island et perdant foi en l'humanit√©",
        "Van Gogh d√©couvrant les filtres beaut√© et pleurant",
        "N√©fertiti r√©agissant aux BBL et chirurgie esth√©tique",
        "Galil√©e expliquant pourquoi la Terre est pas plate aux complotistes",
        "Pythagore essayant de r√©soudre les probl√®mes relationnels sur Reddit",
        "Freud analysant les tweets de 3h du matin",
        "Darwin observant l'√©volution invers√©e sur TikTok",
        "Tesla d√©couvrant les chargeurs de t√©l√©phone et s'√©nervant",
        "Gandhi commentant les cancel culture wars",
        "Platon r√©agissant aux all√©gories modernes type Matrix",
        "Archim√®de calculant le ratio like/followers des influenceurs",
        "Marco Polo d√©couvrant Google Maps et se sentant inutile",
        "Christophe Colomb perdu avec un GPS",
        "Gutenberg voyant l'impression 3D et ragequittant",
        "Beethoven √©coutant de l'hyperpop et convulsant",
        "Monet peignant des memes et pleurant",
        "Curie testant les cristaux de bien-√™tre sur Etsy",
        "Lincoln scrollant LinkedIn et d√©primant",
        "Copernic expliquant que le monde tourne pas autour de toi Karen",
        "Kant d√©battant de morale avec des gens sur les commentaires YouTube",
        "Nietzsche d√©couvrant les self-help bros sur TikTok",
        "Descartes doutant de l'existence des NFT",
        "Voltaire roastant les prises chaudes sur Twitter",
        "Rousseau horrifi√© par la d√©pendance aux r√©seaux sociaux",
        "Pasteur d√©couvrant les anti-vax et perdant espoir",
        "Newton expliquant la gravit√© √† des conspirationnistes",
        "Turing tentant de hacker un influenceur",
        "Nobel d√©couvrant pour quoi son prix est utilis√© aujourd'hui",
        "Edison volant des id√©es sur Kickstarter",
        "Verne pr√©disant le futur mais genre vraiment n'importe quoi"
    ];

    // Variations de r√©actions du personnage
    const REACTIONS = [
        "expression de confusion totale puis rire nerveux",
        "soupir profond et facepalm dramatique",
        "yeux qui s'√©carquillent progressivement, bouche grande ouverte",
        "hochement de t√™te d√©sapprobateur puis regard cam√©ra style The Office",
        "tentative d'explication rationnelle puis abandon et haussement d'√©paules",
        "mimiques faciales exag√©r√©es passant de l'espoir au d√©sespoir"
    ];

    // √âl√©ments visuels pour l'interview
    const VISUAL_ELEMENTS = [
        "Chyron TV ann√©es 2000 avec nom et titre absurde qui d√©file",
        "Split screen montrant r√©action + ce qu'ils voient sur smartphone",
        "Texte style sous-titres meme qui appara√Æt sur leurs phrases choc",
        "Zoom progressif sur le visage pendant la r√©alisation",
        "Coupures de plan style reportage documentaire s√©rieux"
    ];

    const INTERVIEW_STYLES = [
        "format podcast casual avec micro vintage",
        "interview t√©l√© plateau ann√©es 90 avec d√©cor kitsch",
        "format vlog selfie cam√©ra frontale smartphone",
        "interview de rue style micro-trottoir",
        "format YouTube talking head fond blanc minimaliste"
    ];

    // Fonction pour g√©n√©rer le prompt optimis√© TikTok (max 2000 caract√®res)
    const generatePrompt = (index) => {
        const character = CHARACTERS[index % CHARACTERS.length];
        const reaction = REACTIONS[index % REACTIONS.length];
        const visualElement = VISUAL_ELEMENTS[index % VISUAL_ELEMENTS.length];
        const interviewStyle = INTERVIEW_STYLES[index % INTERVIEW_STYLES.length];

        const prompt = `Fausse interview:${character}.
0-2s:intro ${interviewStyle}.${visualElement}.Plan serr√© visage personnage,${reaction}
2-4s:personnage commence √† parler,accent d'√©poque,expressions faciales hyperr√©alistes.Lip-sync parfait
4-8s:montage rapide:r√©action choqu√©e+phrases quotables courtes+gesticulations.Contraste absurde pass√©/pr√©sent
8-10s:punchline finale,regard cam√©ra,coupure abrupte
9:16 vertical.√âclairage naturel cin√©ma.Animation faciale fluide r√©aliste.Costume historique pr√©cis.Fond contexte moderne flou.Sous-titres fran√ßais style meme
Humour absurde anachronisme quotable viral rewatch`;

        // V√©rifier la longueur et logger
        console.log(`üìè Prompt longueur: ${prompt.length} caract√®res`);
        if (prompt.length > 2000) {
            console.warn(`‚ö†Ô∏è ATTENTION: Prompt trop long! ${prompt.length}/2000`);
        }

        return prompt;
    };

    // === GESTION DE LA PERSISTENCE ===
    
    const loadState = () => {
        try {
            const saved = localStorage.getItem(CONFIG.storageKey);
            if (saved) {
                return JSON.parse(saved);
            }
        } catch (e) {
            console.warn("‚ö†Ô∏è Impossible de charger l'√©tat sauvegard√©");
        }
        return {
            generatedVideos: [],
            videosGenerated: 0,
            existingVideoUrls: [],
            pendingGenerations: 0
        };
    };

    const saveState = (state) => {
        try {
            state.existingVideoUrls = Array.from(existingVideoUrls);
            state.generatedVideos = generatedVideos;
            state.videosGenerated = videosGenerated;
            state.pendingGenerations = pendingGenerations;
            localStorage.setItem(CONFIG.storageKey, JSON.stringify(state));
        } catch (e) {
            console.warn("‚ö†Ô∏è Impossible de sauvegarder l'√©tat");
        }
    };

    const clearState = () => {
        localStorage.removeItem(CONFIG.storageKey);
        console.log("üóëÔ∏è √âtat nettoy√©");
    };

    // Charger l'√©tat
    let state = loadState();
    let generatedVideos = state.generatedVideos;
    let videosGenerated = state.videosGenerated;
    let existingVideoUrls = new Set(state.existingVideoUrls);
    let pendingGenerations = state.pendingGenerations || 0;

    // V√©rifier reprise
    if (videosGenerated > 0) {
        console.log(`‚ôªÔ∏è REPRISE apr√®s rechargement`);
        console.log(`üìä ${videosGenerated}/${CONFIG.numberOfVideos} vid√©os g√©n√©r√©es`);
        console.log(`‚è≥ ${pendingGenerations} g√©n√©rations en cours\n`);
        
        if (videosGenerated >= CONFIG.numberOfVideos) {
            console.log("‚úÖ Toutes les vid√©os ont d√©j√† √©t√© g√©n√©r√©es !");
            displayResults();
            return;
        }
    } else {
        console.log(`üé¨ G√©n√©ration PARALL√àLE de ${CONFIG.numberOfVideos} vid√©os`);
        console.log(`‚ö° ${CONFIG.concurrentGenerations} g√©n√©rations simultan√©es\n`);
    }

    window.resetVideoGenerator = () => {
        clearState();
        console.log("‚úÖ G√©n√©rateur r√©initialis√©. Rechargez la page.");
    };

    // === ENREGISTRER VID√âOS EXISTANTES ===
    
    if (existingVideoUrls.size === 0) {
        const existingVideos = document.querySelectorAll('video[src]');
        existingVideos.forEach(vid => {
            if (vid.src) {
                existingVideoUrls.add(vid.src.split('?')[0]);
            }
        });
        console.log(`üìä ${existingVideoUrls.size} vid√©os existantes ignor√©es\n`);
        saveState(state);
    }

    // === T√âL√âCHARGEMENT AUTOMATIQUE ===

    const autoDownloadVideo = async (videoInfo, retryCount = 0) => {
        const maxRetries = CONFIG.maxDownloadRetries;

        if (videoInfo.downloaded) return;

        try {
            console.log(`‚è≥ Attente avant t√©l√©chargement vid√©o ${videoInfo.index}...`);
            await new Promise(resolve => setTimeout(resolve, CONFIG.delayBeforeDownload));

            console.log(`üì• T√©l√©chargement vid√©o ${videoInfo.index}...`);

            const response = await fetch(videoInfo.url);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const blob = await response.blob();

            // V√©rifier que le blob est valide et non vide
            if (!blob || blob.size === 0) {
                throw new Error("Blob vide ou invalide");
            }

            // V√©rifier que c'est bien une vid√©o
            if (!blob.type.startsWith('video/')) {
                throw new Error(`Type invalide: ${blob.type} (attendu: video/*)`);
            }

            console.log(`   Taille: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);

            const blobUrl = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = blobUrl;
            link.download = `video-${videoInfo.index}-${Date.now()}.mp4`;

            document.body.appendChild(link);
            link.click();

            // Attendre un peu avant de nettoyer pour s'assurer que le t√©l√©chargement d√©marre
            await new Promise(resolve => setTimeout(resolve, 1000));

            document.body.removeChild(link);
            window.URL.revokeObjectURL(blobUrl);

            console.log(`‚úÖ Vid√©o ${videoInfo.index} t√©l√©charg√©e !`);

            videoInfo.downloaded = true;
            saveState(state);

        } catch (error) {
            console.error(`‚ùå Erreur t√©l√©chargement vid√©o ${videoInfo.index}: ${error.message}`);

            // Retry si possible
            if (retryCount < maxRetries) {
                const retryDelay = Math.min(3000 * Math.pow(2, retryCount), 15000);
                console.log(`üîÑ Nouvelle tentative t√©l√©chargement ${retryCount + 1}/${maxRetries} dans ${retryDelay/1000}s...`);
                await new Promise(resolve => setTimeout(resolve, retryDelay));
                return autoDownloadVideo(videoInfo, retryCount + 1);
            } else {
                console.error(`üí• √âchec d√©finitif du t√©l√©chargement vid√©o ${videoInfo.index}`);
                throw error;
            }
        }
    };

    // === D√âTECTION CONTINUE DES NOUVELLES VID√âOS ===

    let detectionRunning = true;

    const detectNewVideos = async () => {
        console.log("üëÅÔ∏è D√©tection continue avec MutationObserver d√©marr√©e...\n");

        // Fonction pour traiter une nouvelle vid√©o d√©tect√©e
        const processNewVideo = (videoElement) => {
            if (!videoElement.src) return;

            const urlBase = videoElement.src.split('?')[0];

            // V√©rifier si c'est une nouvelle vid√©o
            if (!existingVideoUrls.has(urlBase) &&
                !generatedVideos.some(v => v.urlBase === urlBase)) {

                videosGenerated++;
                pendingGenerations = Math.max(0, pendingGenerations - 1);

                const videoInfo = {
                    index: videosGenerated,
                    url: videoElement.src,
                    urlBase: urlBase,
                    timestamp: new Date().toISOString(),
                    downloaded: false
                };

                generatedVideos.push(videoInfo);
                existingVideoUrls.add(urlBase);
                saveState(state);

                console.log(`‚úÖ NOUVELLE VID√âO ${videosGenerated}/${CONFIG.numberOfVideos} d√©tect√©e !`);
                console.log(`   En attente: ${pendingGenerations} g√©n√©rations`);

                // T√©l√©chargement automatique
                if (CONFIG.autoDownload) {
                    autoDownloadVideo(videoInfo).catch(err =>
                        console.error(`Erreur t√©l√©chargement: ${err.message}`)
                    );
                }
            }
        };

        // MutationObserver pour d√©tecter les nouvelles vid√©os en temps r√©el
        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                // V√©rifier les nouveaux noeuds ajout√©s
                for (const node of mutation.addedNodes) {
                    if (node.nodeType === 1) { // Element node
                        // V√©rifier si c'est une vid√©o
                        if (node.tagName === 'VIDEO' && node.src) {
                            processNewVideo(node);
                        }
                        // V√©rifier les vid√©os dans les descendants
                        const videos = node.querySelectorAll?.('video[src]');
                        videos?.forEach(processNewVideo);
                    }
                }

                // V√©rifier les attributs modifi√©s (src ajout√© √† une vid√©o existante)
                if (mutation.type === 'attributes' &&
                    mutation.target.tagName === 'VIDEO' &&
                    mutation.attributeName === 'src') {
                    processNewVideo(mutation.target);
                }
            }
        });

        // Observer tout le document
        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['src']
        });

        // Polling de secours (au cas o√π MutationObserver rate quelque chose)
        while (detectionRunning && videosGenerated < CONFIG.numberOfVideos) {
            const videoElements = document.querySelectorAll('video[src]');
            videoElements.forEach(processNewVideo);

            await new Promise(resolve => setTimeout(resolve, CONFIG.pollInterval));
        }

        observer.disconnect();
        console.log("\nüõë D√©tection arr√™t√©e (objectif atteint ou arr√™t manuel)");
    };

    // === LANCEMENT D'UNE G√âN√âRATION ===

    const triggerGeneration = async (generationNumber, retryCount = 0) => {
        const maxRetries = CONFIG.maxClickRetries;

        try {
            // Attendre le champ textarea
            let textarea = document.querySelector('textarea');
            let attempts = 0;
            while (!textarea && attempts < 10) {
                await new Promise(resolve => setTimeout(resolve, 1000));
                textarea = document.querySelector('textarea');
                attempts++;
            }
            if (!textarea) throw new Error("Champ texte non trouv√©");

            // Remplir le prompt avec une id√©e diff√©rente
            const prompt = generatePrompt(generationNumber - 1);
            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(
                window.HTMLTextAreaElement.prototype, 'value'
            ).set;
            nativeInputValueSetter.call(textarea, prompt);
            textarea.dispatchEvent(new Event('input', { bubbles: true }));

            console.log(`üí° Prompt: "${prompt.substring(0, 80)}..."`);

            await new Promise(resolve => setTimeout(resolve, 500));

            // Trouver et cliquer sur le bouton
            const buttons = document.querySelectorAll('button');
            let targetButton = null;
            buttons.forEach(button => {
                const span = button.querySelector('span.sr-only');
                if (span && span.textContent.trim() === 'Create video') {
                    targetButton = button;
                }
            });

            if (!targetButton) throw new Error("Bouton 'Create video' non trouv√©");

            // V√©rifier l'√©tat du bouton avant de cliquer
            const isDisabled = targetButton.disabled || targetButton.getAttribute('aria-disabled') === 'true';
            if (isDisabled) {
                throw new Error("Bouton d√©sactiv√©");
            }

            targetButton.click();

            // Attendre et v√©rifier si une g√©n√©ration a vraiment d√©marr√©
            await new Promise(resolve => setTimeout(resolve, 3000));

            // V√©rifier plusieurs indicateurs qu'une g√©n√©ration est active
            const hasLoader = document.querySelector('[role="status"]') ||
                            document.querySelector('.loading') ||
                            document.querySelector('[class*="loader"]') ||
                            document.querySelector('[class*="spinner"]');

            const buttonNowDisabled = targetButton.disabled ||
                                    targetButton.getAttribute('aria-disabled') === 'true' ||
                                    targetButton.classList.contains('disabled');

            // V√©rifier si le textarea est vide (signe qu'une g√©n√©ration a d√©marr√©)
            const textareaAfter = document.querySelector('textarea');
            const textareaCleared = textareaAfter && textareaAfter.value === '';

            // V√©rifier s'il y a un indicateur de progression
            const hasProgress = document.querySelector('[class*="progress"]') ||
                              document.querySelector('[aria-busy="true"]');

            const generationStarted = hasLoader || buttonNowDisabled || textareaCleared || hasProgress;

            if (!generationStarted) {
                throw new Error("Le clic n'a pas lanc√© de g√©n√©ration");
            }

            pendingGenerations++;
            saveState(state);

            console.log(`‚ñ∂Ô∏è  G√©n√©ration #${generationNumber} lanc√©e avec succ√®s ! (${pendingGenerations} en cours)`);

        } catch (error) {
            console.error(`‚ùå Erreur g√©n√©ration #${generationNumber}: ${error.message}`);

            // Retry si possible
            if (retryCount < maxRetries) {
                console.log(`üîÑ Nouvelle tentative ${retryCount + 1}/${maxRetries} dans ${CONFIG.retryClickDelay/1000}s...`);
                await new Promise(resolve => setTimeout(resolve, CONFIG.retryClickDelay));
                return triggerGeneration(generationNumber, retryCount + 1);
            } else {
                console.error(`üí• √âchec d√©finitif de la g√©n√©ration #${generationNumber} apr√®s ${maxRetries} tentatives`);
                pendingGenerations = Math.max(0, pendingGenerations - 1);
                saveState(state);
                throw error;
            }
        }
    };

    // === LANCEMENT PAR VAGUES ===

    const launchGenerations = async () => {
        const remaining = CONFIG.numberOfVideos - videosGenerated;
        const batches = Math.ceil(remaining / CONFIG.concurrentGenerations);

        console.log(`üöÄ Lancement de ${remaining} g√©n√©rations en ${batches} vague(s)\n`);

        let generationCounter = videosGenerated + 1;
        const failedGenerations = [];

        for (let batch = 0; batch < batches; batch++) {
            const videosInBatch = Math.min(
                CONFIG.concurrentGenerations,
                CONFIG.numberOfVideos - (videosGenerated + pendingGenerations)
            );

            console.log(`\nüì¶ VAGUE ${batch + 1}/${batches} : ${videosInBatch} g√©n√©ration(s)`);

            // Lancer les g√©n√©rations de cette vague
            for (let i = 0; i < videosInBatch; i++) {
                try {
                    await triggerGeneration(generationCounter);
                    generationCounter++;
                } catch (error) {
                    console.error(`üí• G√©n√©ration ${generationCounter} a √©chou√© d√©finitivement`);
                    failedGenerations.push(generationCounter);
                    generationCounter++;
                }

                // Petit d√©lai entre chaque clic
                if (i < videosInBatch - 1) {
                    await new Promise(resolve => setTimeout(resolve, CONFIG.delayBetweenClicks));
                }
            }

            // Attendre avant la prochaine vague (sauf derni√®re)
            if (batch < batches - 1) {
                console.log(`\n‚è≥ Attente de ${CONFIG.delayBetweenBatches / 1000}s avant la prochaine vague...`);
                await new Promise(resolve => setTimeout(resolve, CONFIG.delayBetweenBatches));
            }
        }

        if (failedGenerations.length > 0) {
            console.log(`\n‚ö†Ô∏è ${failedGenerations.length} g√©n√©ration(s) ont √©chou√©: ${failedGenerations.join(', ')}`);
        }

        console.log("\n‚úÖ Toutes les g√©n√©rations ont √©t√© lanc√©es !");
    };

    // === D√âMARRAGE ===
    
    // Lancer la d√©tection en arri√®re-plan
    detectNewVideos();
    
    // Lancer les g√©n√©rations
    await launchGenerations();
    
    // Attendre que toutes les vid√©os soient d√©tect√©es
    console.log("\n‚è≥ Attente de la fin de toutes les g√©n√©rations...\n");
    
    while (videosGenerated < CONFIG.numberOfVideos && detectionRunning) {
        await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    detectionRunning = false;
    displayResults();

    // === AFFICHAGE R√âSULTATS ===
    
    function displayResults() {
        console.log("\n" + "=".repeat(80));
        console.log("üìä R√âSUM√â DES VID√âOS G√âN√âR√âES");
        console.log("=".repeat(80));
        
        generatedVideos.forEach((video, index) => {
            const status = video.downloaded ? "‚úÖ T√©l√©charg√©e" : "‚ùå Non t√©l√©charg√©e";
            console.log(`\n[${index + 1}] ${status} - ${video.timestamp}`);
            console.log(`    URL: ${video.url.split('?')[0].substring(0, 60)}...`);
        });
        
        console.log("\n" + "=".repeat(80));
        console.log("üíæ COMMANDES DISPONIBLES :");
        console.log("=".repeat(80));
        console.log("\n1. downloadAllVideos() - T√©l√©charger toutes");
        console.log("2. downloadVideo(1) - T√©l√©charger la vid√©o #1");
        console.log("3. resetVideoGenerator() - R√©initialiser\n");
    }

    // === FONCTIONS GLOBALES ===
    
    window.downloadAllVideos = async () => {
        const videos = loadState().generatedVideos;
        console.log("‚è≥ T√©l√©chargement de toutes les vid√©os...\n");
        
        for (let i = 0; i < videos.length; i++) {
            await autoDownloadVideo(videos[i]);
            if (i < videos.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        console.log("\n‚úÖ Tous les t√©l√©chargements termin√©s !");
    };

    window.downloadVideo = async (index) => {
        const videos = loadState().generatedVideos;
        
        if (index < 1 || index > videos.length) {
            console.error(`‚ùå Index invalide (1-${videos.length})`);
            return;
        }
        
        await autoDownloadVideo(videos[index - 1]);
    };

})();